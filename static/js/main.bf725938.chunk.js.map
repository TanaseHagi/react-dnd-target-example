{"version":3,"sources":["ItemTypes.ts","Boxy.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemTypes","style","border","backgroundColor","padding","marginRight","marginBottom","float","Boxy","_ref","name","type","accept","onChange","item","ref","useRef","_useDrag","useDrag","end","dropResult","monitor","collect","opacity","isDragging","_useDrag2","Object","slicedToArray","drag","_useDrop","useDrop","drop","dragObject","dragSource","dropTarget","canDrop","isOver","_useDrop2","_useDrop2$","react_default","a","createElement","objectSpread","App","_useState","useState","_useState2","logs","setLogs","concat","toConsumableArray","lib","backend","HTML5Backend","Boxy_Boxy","ROCK","SCISSORS","toLowerCase","PAPER","clear","map","log","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf725938.chunk.js","sourcesContent":["export enum ItemTypes {\n    ROCK = \"ROCK\",\n    SCISSORS = \"SCISSORS\",\n    PAPER = \"PAPER\",\n}\n","import React, { useRef } from \"react\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport {\n    useDrag,\n    useDrop,\n    // DragObjectWithType,\n    DropTargetMonitor,\n    DragSourceMonitor\n} from \"react-dnd\";\n\nconst style: React.CSSProperties = {\n    border: \"1px dashed gray\",\n    backgroundColor: \"white\",\n    padding: \"0.5rem 1rem\",\n    marginRight: \"1.5rem\",\n    marginBottom: \"1.5rem\",\n    float: \"left\"\n};\n\nexport interface ChangeEvent {\n    dragSource: BoxyBox;\n    dropTarget: BoxyBox;\n}\n\nexport interface BoxProps {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n    onChange(event: ChangeEvent): void;\n}\n\ninterface BoxyBox {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n}\n\nexport const Boxy: React.FC<BoxProps> = ({ name, type, accept, onChange }) => {\n    const item: BoxyBox = { type, name, accept };\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ opacity }, drag] = useDrag({\n        item,\n        end(dropResult: BoxyBox | undefined, monitor: DragSourceMonitor) { },\n        collect: (monitor: any) => ({\n            opacity: monitor.isDragging() ? 0.4 : 1\n        })\n    });\n\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept,\n        drop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            // console.log();\n            typeof onChange === \"function\" && onChange({dragSource: dragObject, dropTarget: item});\n        },\n        canDrop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            if (item.type === dragObject.type) return false;\n            return true;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop()\n        })\n    });\n\n    drag(drop(ref));\n\n    return (\n        <div\n            ref={ref}\n            style={{\n                ...style,\n                opacity,\n                backgroundColor:\n                    isOver && canDrop ? \"cornflowerblue\" : canDrop ? \"skyblue\" : \"white\"\n            }}\n        >\n            {name}\n        </div>\n    );\n};\n","import React, { FC, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { Boxy, ChangeEvent } from \"./Boxy\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst App: FC = () => {\n    const [logs, setLogs] = useState<string[]>([]);\n\n    const onChange = ({ dragSource, dropTarget }: ChangeEvent) => {\n        setLogs([...logs, `dropped ${dragSource.type} into ${dropTarget.type}`])\n    }\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div>\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.ROCK]}\n                    type={ItemTypes.SCISSORS}\n                    name={ItemTypes.SCISSORS.toLowerCase()}\n                />\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.SCISSORS]}\n                    type={ItemTypes.PAPER}\n                    name={ItemTypes.PAPER.toLowerCase()}\n                />\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.PAPER]}\n                    type={ItemTypes.ROCK}\n                    name={ItemTypes.ROCK.toLowerCase()}\n                />\n            </div>\n            <div style={{ clear: \"both\" }}>\n                {logs.map(log => <div key={log} style={{ padding: \"5px 0\" }}>{log}</div>)}\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}