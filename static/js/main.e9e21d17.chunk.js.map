{"version":3,"sources":["ItemTypes.ts","Boxy.tsx","BoxyTron.tsx","BoxyDragLayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemTypes","style","border","backgroundColor","padding","marginRight","marginBottom","float","Boxy","_ref","name","type","accept","onChange","item","ref","useRef","_useDrag","useDrag","end","dropResult","monitor","didDrop","dragSource","collect","opacity","isDragging","_useDrag2","Object","slicedToArray","drag","_useDrop","useDrop","drop","dragObject","dropTarget","canDrop","isOver","_useDrop2","_useDrop2$","react_default","a","createElement","objectSpread","BoxyTron","preview","useEffect","getEmptyImage","captureDraggingState","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialOffset","currentOffset","offset","display","_x$y","x","y","transform","concat","WebkitTransform","BoxyDragLayer","props","_useDragLayer","useDragLayer","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","clientOffset","getClientOffset","BOX","color","App","_useState","useState","_useState2","logs","setLogs","toConsumableArray","lib","backend","HTML5Backend","BoxyDragLayer_BoxyDragLayer","Boxy_Boxy","ROCK","SCISSORS","toLowerCase","PAPER","clear","BoxyTron_BoxyTron","map","log","i","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9e21d17.chunk.js","sourcesContent":["export enum ItemTypes {\n    ROCK = \"ROCK\",\n    SCISSORS = \"SCISSORS\",\n    PAPER = \"PAPER\",\n    BOX = \"BOX\",\n}\n","import React, { useRef } from \"react\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport {\n    useDrag,\n    useDrop,\n    // DragObjectWithType,\n    DropTargetMonitor,\n    DragSourceMonitor\n} from \"react-dnd\";\n\nconst style: React.CSSProperties = {\n    border: \"1px dashed gray\",\n    backgroundColor: \"white\",\n    padding: \"0.5rem 1rem\",\n    marginRight: \"1.5rem\",\n    marginBottom: \"1.5rem\",\n    float: \"left\"\n};\n\nexport interface ChangeEvent {\n    dragSource: BoxyBox;\n    dropTarget?: BoxyBox;\n}\n\nexport interface BoxProps {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n    onChange(event: ChangeEvent): void;\n}\n\ninterface BoxyBox {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n}\n\nexport const Boxy: React.FC<BoxProps> = ({ name, type, accept, onChange }) => {\n    const item: BoxyBox = { type, name, accept };\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ opacity }, drag] = useDrag({\n        item,\n        end(dropResult: BoxyBox | undefined, monitor: DragSourceMonitor) {\n            if (!monitor.didDrop()) {\n                typeof onChange === \"function\" && onChange({dragSource: item});\n            }\n            // console.log(\"drag end\", dropResult, monitor);\n        },\n        collect: (monitor: any) => ({\n            opacity: monitor.isDragging() ? 0.4 : 1\n        })\n    });\n\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept,\n        drop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            // console.log();\n            typeof onChange === \"function\" && onChange({dragSource: dragObject, dropTarget: item});\n            // console.log(\"drop\", dragObject, monitor);\n        },\n        canDrop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            if (item.type === dragObject.type) return false;\n            return true;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop()\n        })\n    });\n\n    drag(drop(ref));\n\n    return (\n        <div\n            ref={ref}\n            style={{\n                ...style,\n                opacity,\n                backgroundColor:\n                    isOver && canDrop ? \"cornflowerblue\" : canDrop ? \"skyblue\" : \"white\"\n            }}\n        >\n            {name}\n        </div>\n    );\n};\n","/* eslint-disable */\nimport React, { useRef, useEffect } from \"react\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport {\n    useDrag,\n    useDrop,\n    // DragObjectWithType,\n    DropTargetMonitor,\n    DragSourceMonitor\n} from \"react-dnd\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\n\nconst style: React.CSSProperties = {\n    border: \"1px dashed gray\",\n    backgroundColor: \"white\",\n    padding: \"0.5rem 1rem\",\n    marginRight: \"1.5rem\",\n    marginBottom: \"1.5rem\",\n    float: \"left\"\n};\n\nexport interface ChangeEvent {\n    dragSource: BoxyBox;\n    dropTarget?: BoxyBox;\n}\n\nexport interface BoxProps {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n    onChange(event: ChangeEvent): void;\n}\n\ninterface BoxyBox {\n    name: string;\n    type: ItemTypes;\n    accept: ItemTypes[];\n}\n\nexport const BoxyTron: React.FC<BoxProps> = ({ name, type, accept, onChange }) => {\n    const item: BoxyBox = { type, name, accept };\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [{ opacity }, drag, preview] = useDrag({\n        item,\n        end(dropResult: BoxyBox | undefined, monitor: DragSourceMonitor) {\n            if (!monitor.didDrop()) {\n                typeof onChange === \"function\" && onChange({ dragSource: item });\n            }\n            // console.log(\"drag end\", dropResult, monitor);\n        },\n        collect: (monitor: any) => ({\n            opacity: monitor.isDragging() ? 0.4 : 1\n        })\n    });\n\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept,\n        drop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            // console.log();\n            typeof onChange === \"function\" && onChange({ dragSource: dragObject, dropTarget: item });\n            // console.log(\"drop\", dragObject, monitor);\n        },\n        canDrop: (dragObject: BoxyBox /* DragObjectWithType */, monitor: DropTargetMonitor) => {\n            if (item.name === dragObject.name) return false;\n            return true;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop()\n        })\n    });\n\n    drag(drop(ref));\n\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, []);\n\n    return (\n        <div\n            ref={ref}\n            style={{\n                ...style,\n                opacity,\n                backgroundColor:\n                    isOver && canDrop ? \"cornflowerblue\" : canDrop ? \"skyblue\" : \"white\"\n            }}\n        >\n            {name}\n        </div>\n    );\n};\n","/* eslint-disable */\nimport React, { FC } from \"react\";\nimport { XYCoord, useDragLayer } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes\";\n\nconst layerStyles: React.CSSProperties = {\n    position: \"fixed\",\n    pointerEvents: \"none\",\n    zIndex: 100,\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\n\nfunction getItemStyles(\n    initialOffset: XYCoord | null,\n    currentOffset: XYCoord | null,\n    offset: XYCoord | null\n) {\n    if (!initialOffset || !currentOffset || !offset) {\n        return {\n            display: \"none\"\n        };\n    }\n\n    // let { x, y } = currentOffset;\n\n    let { x, y } = {\n        x: offset.x + 10,\n        y: offset.y + 10\n    };\n\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform\n    };\n}\n\nexport const BoxyDragLayer: FC = props => {\n    const {\n        isDragging,\n        itemType,\n        item,\n        initialOffset,\n        currentOffset,\n        clientOffset\n    } = useDragLayer(monitor => {\n        return {\n            item: monitor.getItem(),\n            itemType: monitor.getItemType(),\n            initialOffset: monitor.getInitialSourceClientOffset(),\n            currentOffset: monitor.getSourceClientOffset(),\n            isDragging: monitor.isDragging(),\n            clientOffset: monitor.getClientOffset()\n        };\n    });\n\n    if ((item && item.type) !== ItemTypes.BOX) { return null }\n\n    return (\n        <div style={layerStyles}>\n            <div\n                style={{\n                    display: \"inline-block\",\n                    ...getItemStyles(initialOffset, currentOffset, clientOffset),\n                    backgroundColor: \"blueviolet\",\n                    color: \"whitesmoke\",\n                    padding: \"10px\"\n                }}\n            >\n                <div>My drag layer: {item && item.name}</div>\n                {/* <div>isDragging: {isDragging}</div>\n        <div>itemType: {String(itemType)}</div>\n        <div>item: {JSON.stringify(item)}</div>\n        {initialOffset != null || currentOffset != null ? (\n          <>\n            <div>\n              initialOffset: {initialOffset.x} x {initialOffset.y}\n            </div>\n            <div>\n              currentOffset: {currentOffset.x} x {currentOffset.x}\n            </div>\n            <div>\n              clientOffset: {clientOffset.x} x {clientOffset.x}\n            </div>\n          </>\n        ) : null} */}\n            </div>\n        </div>\n    );\n};\n","/* eslint-disable */\nimport React, { FC, useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { Boxy, ChangeEvent } from \"./Boxy\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport { BoxyTron } from \"./BoxyTron\";\nimport { BoxyDragLayer } from \"./BoxyDragLayer\";\n\nconst App: FC = () => {\n    const [logs, setLogs] = useState<string[]>([]);\n\n    const onChange = ({ dragSource, dropTarget }: ChangeEvent) => {\n        if (dropTarget == null) {\n            setLogs([...logs, `did not drop ${dragSource.name} on any target`])\n            return;\n        }\n        setLogs([...logs, `dropped ${dragSource.name} on ${dropTarget.name}`]);\n    }\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <BoxyDragLayer />\n            <div>\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.ROCK]}\n                    type={ItemTypes.SCISSORS}\n                    name={ItemTypes.SCISSORS.toLowerCase()}\n                />\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.SCISSORS]}\n                    type={ItemTypes.PAPER}\n                    name={ItemTypes.PAPER.toLowerCase()}\n                />\n                <Boxy\n                    onChange={onChange}\n                    accept={[ItemTypes.PAPER]}\n                    type={ItemTypes.ROCK}\n                    name={ItemTypes.ROCK.toLowerCase()}\n                />\n            </div>\n            <div style={{ clear: \"both\" }}>\n                <BoxyTron\n                    onChange={onChange}\n                    accept={[ItemTypes.BOX]}\n                    type={ItemTypes.BOX}\n                    name={\"Boxy 1\"}\n                />\n                <BoxyTron\n                    onChange={onChange}\n                    accept={[ItemTypes.BOX]}\n                    type={ItemTypes.BOX}\n                    name={\"Boxy 2\"}\n                />\n                <BoxyTron\n                    onChange={onChange}\n                    accept={[ItemTypes.BOX]}\n                    type={ItemTypes.BOX}\n                    name={\"Boxy 3\"}\n                />\n            </div>\n            <div style={{ clear: \"both\" }}>\n                {logs.map((log, i) => <div key={i} style={{ padding: \"5px 0\" }}>{log}</div>)}\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}